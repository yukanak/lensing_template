import numpy as np
import sys, os
import matplotlib.pyplot as plt
import btemplate as bt

yaml_file = 'bt_gmv3500.yaml'
yaml_file_prfhrd = 'bt_gmv3500_prfhrd.yaml'
yaml_file_pp = 'bt_gmv3500_pp.yaml'
yaml_file_combined = 'bt_gmv3500_combined_pp.yaml'
idxs = np.arange(499)+1
btmp_standard = bt.btemplate(yaml_file)
btmp_prfhrd = bt.btemplate(yaml_file_prfhrd)
btmp_pp = bt.btemplate(yaml_file_pp)
btmp_combined = bt.btemplate(yaml_file_combined)
lmax = 4096
l = np.arange(lmax+1)
lbins = np.logspace(np.log10(30),np.log10(1000),20)
bin_centers = (lbins[:-1] + lbins[1:]) / 2
digitized = np.digitize(np.arange(6144), lbins)

auto_standard = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
cross_standard = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
auto_in_standard = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
auto_prfhrd = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
cross_prfhrd = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
auto_in_prfhrd = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
auto_pp = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
cross_pp = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
auto_in_pp = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
auto_combined = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
cross_combined = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
auto_in_combined = np.zeros((len(idxs),len(lbins)-1),dtype=np.complex_)
for ii, idx in enumerate(idxs):
    print(idx)
    a_standard, c_standard, a_in_standard = btmp_standard.get_masked_spec(idx)
    auto_standard[ii,:] = [a_standard[digitized == i].mean() for i in range(1, len(lbins))]
    cross_standard[ii,:] = [c_standard[digitized == i].mean() for i in range(1, len(lbins))]
    auto_in_standard[ii,:] = [a_in_standard[digitized == i].mean() for i in range(1, len(lbins))]
    a_prfhrd, c_prfhrd, a_in_prfhrd = btmp_prfhrd.get_masked_spec(idx)
    auto_prfhrd[ii,:] = [a_prfhrd[digitized == i].mean() for i in range(1, len(lbins))]
    cross_prfhrd[ii,:] = [c_prfhrd[digitized == i].mean() for i in range(1, len(lbins))]
    auto_in_prfhrd[ii,:] = [a_in_prfhrd[digitized == i].mean() for i in range(1, len(lbins))]
    a_pp, c_pp, a_in_pp = btmp_pp.get_masked_spec(idx)
    auto_pp[ii,:] = [a_pp[digitized == i].mean() for i in range(1, len(lbins))]
    cross_pp[ii,:] = [c_pp[digitized == i].mean() for i in range(1, len(lbins))]
    auto_in_pp[ii,:] = [a_in_pp[digitized == i].mean() for i in range(1, len(lbins))]
    a_combined, c_combined, a_in_combined = btmp_combined.get_masked_spec(idx)
    auto_combined[ii,:] = [a_combined[digitized == i].mean() for i in range(1, len(lbins))]
    cross_combined[ii,:] = [c_combined[digitized == i].mean() for i in range(1, len(lbins))]
    auto_in_combined[ii,:] = [a_in_combined[digitized == i].mean() for i in range(1, len(lbins))]
auto_mean_standard = np.mean(auto_standard, axis=0)
auto_var_standard = np.var(auto_standard, axis=0)
cross_mean_standard = np.mean(cross_standard, axis=0)
cross_var_standard = np.var(cross_standard, axis=0)
auto_input_mean_standard = np.mean(auto_in_standard, axis=0)
auto_input_var_standard = np.var(auto_in_standard, axis=0)
auto_mean_prfhrd = np.mean(auto_prfhrd, axis=0)
auto_var_prfhrd = np.var(auto_prfhrd, axis=0)
cross_mean_prfhrd = np.mean(cross_prfhrd, axis=0)
cross_var_prfhrd = np.var(cross_prfhrd, axis=0)
auto_input_mean_prfhrd = np.mean(auto_in_prfhrd, axis=0)
auto_input_var_prfhrd = np.var(auto_in_prfhrd, axis=0)
auto_mean_pp = np.mean(auto_pp, axis=0)
auto_var_pp = np.var(auto_pp, axis=0)
cross_mean_pp = np.mean(cross_pp, axis=0)
cross_var_pp = np.var(cross_pp, axis=0)
auto_input_mean_pp = np.mean(auto_in_pp, axis=0)
auto_input_var_pp = np.var(auto_in_pp, axis=0)
auto_mean_combined = np.mean(auto_combined, axis=0)
auto_var_combined = np.var(auto_combined, axis=0)
cross_mean_combined = np.mean(cross_combined, axis=0)
cross_var_combined = np.var(cross_combined, axis=0)
auto_input_mean_combined = np.mean(auto_in_combined, axis=0)
auto_input_var_combined = np.var(auto_in_combined, axis=0)

# Plot
plt.figure(0)
plt.clf()
plt.errorbar(bin_centers, auto_input_mean_standard, yerr=np.sqrt(auto_input_var_standard), color='forestgreen', linestyle='-', label="input B auto")
plt.errorbar(bin_centers, auto_mean_standard, yerr=np.sqrt(auto_var_standard), color='firebrick', linestyle='-', label="btemplate auto")
plt.errorbar(bin_centers, cross_mean_standard, yerr=np.sqrt(cross_var_standard), color='darkblue', linestyle='-', label="btemplate x input B cross")
#plt.errorbar(bin_centers, auto_mean_prfhrd, yerr=np.sqrt(auto_var_prfhrd), color='salmon', linestyle='--', label="btemplate auto, prfhrd")
#plt.errorbar(bin_centers, cross_mean_prfhrd, yerr=np.sqrt(cross_var_prfhrd), color='cornflowerblue', linestyle='--', label="btemplate x input B cross, prfhrd")
#plt.errorbar(bin_centers, auto_mean_pp, yerr=np.sqrt(auto_var_pp), color='pink', linestyle='--', label="btemplate auto, pol-only")
#plt.errorbar(bin_centers, cross_mean_pp, yerr=np.sqrt(cross_var_pp), color='lightsteelblue', linestyle='--', label="btemplate x input B cross, pol-only")
#plt.errorbar(bin_centers, auto_mean_combined, yerr=np.sqrt(auto_var_combined), color='pink', linestyle='--', label="btemplate auto, combined tracer")
#plt.errorbar(bin_centers, cross_mean_combined, yerr=np.sqrt(cross_var_combined), color='lightsteelblue', linestyle='--', label="btemplate x input B cross, combined tracer")
plt.legend(loc='lower left', fontsize='small')
plt.xlabel(r"$\ell$")
plt.ylabel(r"$C_\ell^{BB}$ [$\mu K^2$]")
plt.xscale('log')
plt.yscale('log')
plt.xlim(10,2000)
plt.ylim(1e-7,3e-6)
plt.show()
plt.savefig('figs/btemplates_check_prfhrd.png',bbox_inches='tight')

plt.clf()
fig,(ax1,ax2) = plt.subplots(2,1)
ax1.axhline(y=1, color='gray', alpha=0.5, linestyle='--')
ax1.plot(bin_centers, (auto_mean_standard/cross_mean_standard), color='forestgreen', linestyle='-', alpha=0.8, label=f'btemplate auto / btemplate x input B cross')
#ax1.plot(bin_centers, (auto_mean_prfhrd/cross_mean_prfhrd), color='lightgreen', linestyle='--', alpha=0.8, label=f'btemplate auto / btemplate x input B cross, prfhrd')
#ax1.plot(bin_centers, (auto_mean_pp/cross_mean_pp), color='aquamarine', linestyle='--', alpha=0.8, label=f'btemplate auto / btemplate x input B cross, pol-only')
#ax1.plot(bin_centers, (auto_mean_combined/cross_mean_combined), color='aquamarine', linestyle='--', alpha=0.8, label=f'btemplate auto / btemplate x input B cross, combined')
#ax1.plot(bin_centers, (auto_mean_prfhrd/auto_mean_standard), color='darkorange', linestyle='--', alpha=0.8, label=f'btemplate auto prfhrd / standard')
#ax1.plot(bin_centers, (auto_mean_pp/auto_mean_standard), color='bisque', linestyle='--', alpha=0.8, label=f'btemplate auto pol-only / standard')
#ax1.plot(bin_centers, (auto_mean_combined/auto_mean_standard), color='bisque', linestyle='--', alpha=0.8, label=f'btemplate auto combined / standard')
#ax1.plot(bin_centers, (cross_mean_prfhrd/cross_mean_standard), color='mediumpurple', linestyle='--', alpha=0.8, label=f'btemplate x input B cross prfhrd / standard')
#ax1.plot(bin_centers, (cross_mean_pp/cross_mean_standard), color='plum', linestyle='--', alpha=0.8, label=f'btemplate x input B cross pol-only / standard')
ax1.set_xlim(10,2000)
ax1.set_xscale('log')
ax1.set_ylim(0.25,1.1)
#ax1.legend(loc='lower left', bbox_to_anchor=(1.01, 0), fontsize='x-small')
ax1.legend(loc='lower left', fontsize='x-small')
ax2.plot(bin_centers, (auto_mean_standard/auto_input_mean_standard), color='firebrick', linestyle='-', alpha=0.8, label=f'btemplate auto / input B auto')
#ax2.plot(bin_centers, (auto_mean_prfhrd/auto_input_mean_prfhrd), color='salmon', linestyle='--', alpha=0.8, label=f'btemplate auto / input B auto, prfhrd')
##ax2.plot(bin_centers, (auto_mean_pp/auto_input_mean_pp), color='pink', linestyle='--', alpha=0.8, label=f'btemplate auto / input B auto, pol-only')
#ax2.plot(bin_centers, (auto_mean_combined/auto_input_mean_combined), color='pink', linestyle='--', alpha=0.8, label=f'btemplate auto / input B auto, combined')
ax2.plot(bin_centers, (cross_mean_standard/auto_input_mean_standard), color='darkblue', linestyle='-', alpha=0.8, label=f'btemplate x input B cross / input B auto')
#ax2.plot(bin_centers, (cross_mean_prfhrd/auto_input_mean_prfhrd), color='cornflowerblue', linestyle='--', alpha=0.8, label=f'btemplate x input B cross / input B auto, prfhrd')
#ax2.plot(bin_centers, (cross_mean_pp/auto_input_mean_pp), color='lightsteelblue', linestyle='--', alpha=0.8, label=f'btemplate x input B cross / input B auto, pol-only')
#ax2.plot(bin_centers, (cross_mean_combined/auto_input_mean_combined), color='lightsteelblue', linestyle='--', alpha=0.8, label=f'btemplate x input B cross / input B auto, combined')
ax2.set_xlim(10,2000)
ax2.set_xscale('log')
#ax2.set_ylim(0.2,0.65)
ax2.set_ylim(0.2,0.8)
#ax2.legend(loc='lower left', bbox_to_anchor=(1.01, 0), fontsize='x-small')
ax2.legend(loc='upper left', fontsize='x-small')
ax1.set_title(r"$C_\ell^{BB}$ ratios")
ax2.set_xlabel('$\ell$')
plt.savefig('figs/btemplate_check_ratio_prfhrd.png',bbox_inches='tight')

plt.clf()
plt.plot(bin_centers, auto_input_var_standard, color='forestgreen', linestyle='-', label="input B auto")
plt.plot(bin_centers, auto_var_standard, color='firebrick', linestyle='-', label="lensing template auto, standard")
plt.plot(bin_centers, cross_var_standard, color='darkblue', linestyle='-', label="cross, standard")
plt.plot(bin_centers, auto_var_prfhrd, color='salmon', linestyle='--', label="lensing template auto, prfhrd")
plt.plot(bin_centers, cross_var_prfhrd, color='cornflowerblue', linestyle='--', label="cross, prfhrd")
#plt.plot(bin_centers, auto_var_pp, color='pink', linestyle='--', label="lensing template auto, pol-only")
#plt.plot(bin_centers, cross_var_pp, color='lightsteelblue', linestyle='--', label="cross, pol-only")
plt.plot(bin_centers, auto_var_combined, color='pink', linestyle='--', label="lensing template auto, combined")
plt.plot(bin_centers, cross_var_combined, color='lightsteelblue', linestyle='--', label="cross, combined")
plt.legend(loc='upper right', fontsize='x-small')
plt.xlabel(r"$\ell$")
plt.ylabel(r"Variance")
plt.xscale('log')
plt.yscale('log')
plt.xlim(10,2000)
plt.show()
plt.savefig('figs/btemplates_var_prfhrd.png',bbox_inches='tight')

# Get correlation coefficient, averaged for 50 < ell < 200
auto_standard = np.zeros((len(idxs)),dtype=np.complex_)
cross_standard = np.zeros((len(idxs)),dtype=np.complex_)
auto_in_standard = np.zeros((len(idxs)),dtype=np.complex_)
auto_prfhrd = np.zeros((len(idxs)),dtype=np.complex_)
cross_prfhrd = np.zeros((len(idxs)),dtype=np.complex_)
auto_in_prfhrd = np.zeros((len(idxs)),dtype=np.complex_)
auto_pp = np.zeros((len(idxs)),dtype=np.complex_)
cross_pp = np.zeros((len(idxs)),dtype=np.complex_)
auto_in_pp = np.zeros((len(idxs)),dtype=np.complex_)
auto_combined = np.zeros((len(idxs)),dtype=np.complex_)
cross_combined = np.zeros((len(idxs)),dtype=np.complex_)
auto_in_combined = np.zeros((len(idxs)),dtype=np.complex_)
for ii, idx in enumerate(idxs):
    print(idx)
    a_standard, c_standard, a_in_standard = btmp_standard.get_masked_spec(idx)
    auto_standard[ii] = np.mean(a_standard[50:201])
    cross_standard[ii] = np.mean(c_standard[50:201])
    auto_in_standard[ii] = np.mean(a_in_standard[50:201])
    a_prfhrd, c_prfhrd, a_in_prfhrd = btmp_prfhrd.get_masked_spec(idx)
    auto_prfhrd[ii] = np.mean(a_prfhrd[50:201])
    cross_prfhrd[ii] = np.mean(c_prfhrd[50:201])
    auto_in_prfhrd[ii] = np.mean(a_in_prfhrd[50:201])
    a_pp, c_pp, a_in_pp = btmp_pp.get_masked_spec(idx)
    auto_pp[ii] = np.mean(a_pp[50:201])
    cross_pp[ii] = np.mean(c_pp[50:201])
    auto_in_pp[ii] = np.mean(a_in_pp[50:201])
    a_combined, c_combined, a_in_combined = btmp_combined.get_masked_spec(idx)
    auto_combined[ii] = np.mean(a_combined[50:201])
    cross_combined[ii] = np.mean(c_combined[50:201])
    auto_in_combined[ii] = np.mean(a_in_combined[50:201])
auto_mean_standard = np.mean(auto_standard, axis=0)
cross_mean_standard = np.mean(cross_standard, axis=0)
auto_input_mean_standard = np.mean(auto_in_standard, axis=0)
auto_mean_prfhrd = np.mean(auto_prfhrd, axis=0)
cross_mean_prfhrd = np.mean(cross_prfhrd, axis=0)
auto_input_mean_prfhrd = np.mean(auto_in_prfhrd, axis=0)
auto_mean_pp = np.mean(auto_pp, axis=0)
cross_mean_pp = np.mean(cross_pp, axis=0)
auto_input_mean_pp = np.mean(auto_in_pp, axis=0)
auto_mean_combined = np.mean(auto_combined, axis=0)
cross_mean_combined = np.mean(cross_combined, axis=0)
auto_input_mean_combined = np.mean(auto_in_combined, axis=0)
r_std = cross_mean_standard / np.sqrt(auto_mean_standard * auto_input_mean_standard)
r_prfhrd = cross_mean_prfhrd / np.sqrt(auto_mean_prfhrd * auto_input_mean_prfhrd)
r_pp = cross_mean_pp / np.sqrt(auto_mean_pp * auto_input_mean_pp)
r_combined = cross_mean_combined / np.sqrt(auto_mean_combined * auto_input_mean_combined)
print("Correlation coefficient, standard:", r_std)
print("Correlation coefficient, profile hardened:", r_prfhrd)
print("Correlation coefficient, pol-only:", r_pp)
print("Correlation coefficient, combined tracer:", r_combined)

